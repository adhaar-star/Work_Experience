<?php/** * @property CI_Loader $load * @property CI_Form_validation $form_validation * @property CI_Input $input * @property CI_Email $email * @property CI_Session $session * @property CI_DB_active_record $db * @property CI_Pagination $pagination * @property CI_upload $upload */class Jarvis extends MY_Controller{    function __construct()    {        parent::__construct();    }    function index()    {        $this->view('jarvis/index');    }    function start_chat(){        $this->load->library('form_validation');        $this->form_validation->set_rules('client-email', "client-email", 'trim|xss_clean|htmlspecialchars|required');        if ($this->form_validation->run() == true) {            $this->session->set_userdata('client-email', $this->input->post('client-email'));        }        redirect('jarvis');    }    function sent_messages()    {        $message = html_escape($this->input->post('message', true));        $messages = array();        $messages[0] = auto_link($message,'url');        if ($message) {            $this->save_message($message);            $response = auto_link($this->find_response($message),'url');            $this->save_message($response);  // save the robot reply in messages        }        $messages[1] = $response;        $messages[2] = time();        $vars['messages'] = $messages;        $this->load->view('jarvis/sent_messages', $vars);    }    function find_response($message = '')    {        $matched_commands = $this->db->query("SELECT `command`,`response`                                              FROM social_commands                                              WHERE MATCH (`command`) AGAINST('" . $message . "')                                              OR command LIKE '%" . $message . "'                                              OR command LIKE '" . $message . "%'                                              limit 1                                          ");        if (is_object($matched_commands)) {            if ($matched_commands->num_rows() > 0) {                return $matched_commands->row()->response;            }        }        //return $this->_get_bing($message);        return option_get('default-cannot-understand-message');    }    private function _get_bing($message){        $keyword = $message;        //Lets do a bing search for this thing        $this->load->library('bing');        $stuff = array();        $search 	= $this->bing->get_search($keyword);        //$stuff['images'] 	= $this->bing->get_images($keyword);        //$stuff['videos'] 	= $this->bing->get_videos($keyword);        //$stuff['news'] 		= $this->bing->get_news($keyword);        //return dump($search[0]['url']);        return $search[0]['description'].               ' <a href="'.$search[0]['url'].'" target="_blank">link</a>';    }    function save_email()    {        $email = $this->input->post('email');        $this->session->set_userdata(array('customer-email' => $email));    }    private function save_message($message = '', $type = 0)    {        $obj = new stdClass();        $obj->ip = $_SERVER['REMOTE_ADDR'];        $obj->email = $this->session->userdata('client-email');        $obj->message = auto_link($message);        $obj->type = $type; // client or robot        $obj->created_date = time();        $obj->date = date('Y-d-m');        $obj->was_helpful= 0;        $this->db->insert('messages', $obj);    }}